openapi: 3.0.3
info:
  title: NK Order Process Service API
  description: API for managing customer in the NK Order Process Microservice
  version: 1.0.0
servers:
  - url: http://localhost:8080/api/v1
    description: Local development server
  - url: https://mock.nk-order-process-ms.com/api/v1
    description: Mock server for testing endpoints with example data
paths:
  /order:
    get:
      summary: Retrieve a paginated list of orders
      operationId: listOrders
      parameters:
        - name: page
          in: query
          description: The page number to retrieve (zero-based index).
          required: false
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          description: The number of orders per page.
          required: false
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: A paginated list of orders
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: array
                    items:
                      $ref: '#/components/schemas/Order'
                  totalElements:
                    type: integer
                  totalPages:
                    type: integer
                  size:
                    type: integer
                  number:
                    type: integer
      tags:
        - Order
    post:
      summary: Create a new order
      operationId: createOrder
      requestBody:
        description: Order to be created
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderInput'
      responses:
        '201':
          description: Order created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
      tags:
        - Order
  /order/{id}:
    get:
      summary: Retrieve an order by ID
      operationId: getOrderById
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the order to retrieve
          schema:
            type: string
      responses:
        '200':
          description: Order found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: Order not found
      tags:
        - Order
    put:
      summary: Update an existing order by ID
      operationId: updateOrder
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the order to update
          schema:
            type: string
      requestBody:
        description: Updated order data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderInput'
      responses:
        '200':
          description: Order updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Order with ID 64b7fd18e13e3c76f1f6d4b2 not found.
        '400':
          description: Bad request. Validation failed.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invalid data.
      tags:
        - Order
    delete:
      summary: Delete an order by ID
      operationId: deleteOrder
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the order to delete
          schema:
            type: string
      responses:
        '204':
          description: Order deleted successfully
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Order with ID 64b7fd18e13e3c76f1f6d4b2 not found.
      tags:
        - Order
  /item:
    get:
      summary: Retrieve a paginated list of items
      operationId: listItems
      parameters:
        - name: page
          in: query
          description: The page number to retrieve (zero-based index).
          required: false
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          description: The number of items per page.
          required: false
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: A paginated list of items
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: array
                    items:
                      $ref: '#/components/schemas/Item'
                  totalElements:
                    type: integer
                    description: The total number of items.
                    example: 50
                  totalPages:
                    type: integer
                    description: The total number of pages.
                    example: 5
                  size:
                    type: integer
                    description: The size of each page.
                    example: 10
                  number:
                    type: integer
                    description: The current page number.
                    example: 0
      tags:
        - Item
    post:
      summary: Create a new item
      operationId: createItem
      requestBody:
        description: Item to be created
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ItemInput'
      responses:
        '201':
          description: Item created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        '409':
          description: Conflict. Item already exists.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Item with the name 'Nike Shorts' already exists.
                required:
                  - message
      tags:
        - Item
  /item/{id}:
    get:
      summary: Retrieve a single item by ID
      operationId: getItemById
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the item to retrieve
          schema:
            type: string
      responses:
        '200':
          description: Item found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        '404':
          description: Item not found
      tags:
        - Item
    put:
      summary: Update an existing item by ID
      operationId: updateItem
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the item to update
          schema:
            type: string
      requestBody:
        description: Updated item data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ItemInput'
      responses:
        '200':
          description: Item updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        '404':
          description: Item not found
      tags:
        - Item
    delete:
      summary: Delete a item by ID
      operationId: deleteItem
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the item to delete
          schema:
            type: string
      responses:
        '204':
          description: Item deleted successfully
        '404':
          description: Item not found
      tags:
        - Item
  /customer:
    get:
      summary: Retrieve a paginated list of customers
      operationId: listCustomers
      parameters:
        - name: page
          in: query
          description: The page number to retrieve (zero-based index).
          required: false
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          description: The number of customers per page.
          required: false
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: A paginated list of customers
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: array
                    items:
                      $ref: '#/components/schemas/Customer'
                  totalElements:
                    type: integer
                    description: The total number of customers.
                    example: 100
                  totalPages:
                    type: integer
                    description: The total number of pages.
                    example: 10
                  size:
                    type: integer
                    description: The size of each page.
                    example: 10
                  number:
                    type: integer
                    description: The current page number.
                    example: 0
      tags:
        - Customer
    post:
      summary: Create a new customer
      operationId: createCustomer
      requestBody:
        description: Customer to be created
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerInput'
      responses:
        '201':
          description: Customer created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '409':
          description: Conflict. Customer already exists.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Customer with the document 12345678974 and name X already exists.
                required:
                  - message
      tags:
        - Customer
  /customer/{id}:
    get:
      summary: Retrieve a single customer by ID
      operationId: getCustomerById
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the customer to retrieve
          schema:
            type: string
      responses:
        '200':
          description: Customer found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '404':
          description: Customer not found
      tags:
        - Customer
    put:
      summary: Update an existing customer by ID
      operationId: updateCustomer
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the customer to update
          schema:
            type: string
      requestBody:
        description: Updated customer data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerInput'
      responses:
        '200':
          description: Customer updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '404':
          description: Customer not found
      tags:
        - Customer
    delete:
      summary: Delete a customer by ID
      operationId: deleteCustomer
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the customer to delete
          schema:
            type: string
      responses:
        '204':
          description: Customer deleted successfully
        '404':
          description: Customer not found
      tags:
        - Customer
components:
  schemas:
    Order:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the order
          example: "64b7fd18e13e3c76f1f6d4b2"
        orderId:
          type: string
          description: Unique order identifier
          example: "11"
        orderStatus:
          type: string
          description: Status of the order
          example: "CALCULATED"
        notes:
          type: string
          description: Additional notes for the order
          example: "Deliver in the night."
        customer:
          $ref: '#/components/schemas/Customer'
        items:
          type: array
          description: List of items in the order
          items:
            $ref: '#/components/schemas/OrderItem'
        totalAmount:
          type: number
          format: float
          description: Total amount for the order
          example: 580.44
        totalItems:
          type: integer
          description: Total quantity of items in the order
          example: 7
    OrderInput:
      type: object
      properties:
        orderId:
          type: string
          description: Unique order identifier
          example: "11"
        orderStatus:
          type: string
          description: Status of the order
          example: "CALCULATED"
        notes:
          type: string
          description: Additional notes for the order
          example: "Deliver in the night."
        customerId:
          type: string
          description: ID of the customer related to the order
          example: "64b7fd18e13e3c76f1f6d4b2"
        items:
          type: array
          description: List of items in the order
          items:
            $ref: '#/components/schemas/OrderItemInput'
        totalAmount:
          type: number
          format: float
          description: Total amount for the order
          example: 580.44
        totalItems:
          type: integer
          description: Total quantity of items in the order
          example: 7
    OrderItem:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the order item
          example: "64b7fd18e13e3c76f1f6d4b4"
        item:
          $ref: '#/components/schemas/Item'
        quantity:
          type: integer
          description: Quantity of the item in the order
          example: 3
        subtotal:
          type: number
          format: float
          description: Subtotal for the item (quantity * unitPrice)
          example: 240.0
    OrderItemInput:
      type: object
      properties:
        item:
          $ref: '#/components/schemas/ItemInput'
        quantity:
          type: integer
          description: Quantity of the item in the order
          example: 3
        subtotal:
          type: number
          format: float
          description: Subtotal for the item (quantity * unitPrice)
          example: 240.0
    Item:
      type: object
      properties:
        id:
          type: string
          description: The unique identifier of the item.
          example: 64b7fd18e13e3c76f1f6d4b2
        description:
          type: string
          description: A brief description of the item.
          example: "Shorts"
        brandName:
          type: string
          description: A brand name of item.
          example: "Nike"
        unitPrice:
          type: number
          format: float
          description: The price per unit of the item.
          example: 100
    ItemInput:
      type: object
      properties:
        description:
          type: string
          description: A brief description of the item.
          example: "Shorts"
        brandName:
          type: string
          description: A brand name of item.
          example: "Nike"
        unitPrice:
          type: number
          format: float
          description: The price per unit of the item.
          example: 100
    Customer:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the customer
          example: 64b7fd18e13e3c76f1f6d4b2
        document:
          type: string
          description: Document number of the customer
          example: "53354296070"
        name:
          type: string
          description: Name of the customer
          example: "João Silva"
        address:
          type: string
          description: Address of the customer
          example: "Street of x, 10"
        phoneNumber:
          type: string
          description: Phone number of the customer
          example: "(11) 98765-4321"
        email:
          type: string
          description: Email address of the customer
          example: "joao@email.com"
    CustomerInput:
      type: object
      properties:
        document:
          type: string
          description: Document number of the customer
          example: "53354296070"
        name:
          type: string
          description: Name of the customer
          example: "João Silva"
        address:
          type: string
          description: Address of the customer
          example: "Street of x, 10"
        phoneNumber:
          type: string
          description: Phone number of the customer
          example: "(11) 98765-4321"
        email:
          type: string
          description: Email address of the customer
          example: "joao@email.com"